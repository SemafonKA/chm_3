#pragma once
#include <vector>
#include "Matrix.h"

// Неполное разложение LU(sq) матрицы разреженного строчно-столбцового формата Matrix
// Не хранит портрет матрицы, но использует портрет исходной матрицы (а также ссылается на неё)
class LU {

// Блок внутренних переменных разложения LU
public:
   const Matrix* parent = nullptr;

   // Вектор диагональных элементов LU разложения. В данном случае диагонали L и U совпадают
   std::vector<double> di;

   // Вектор элементов нижнего треугольника L
   std::vector<double> ggl;

   // Вектор элементов верхнего треугольника U
   std::vector<double> ggu;

// Блок основных конструкторов класса
public:

   /// <summary>
   /// Конструктор с резервированием памяти под разложение
   /// </summary>
   /// <param name="diSize"> - размер диагонали,</param>
   /// <param name="luSize"> - размер массивов нижнего и верхнего треугольника</param>
   LU(size_t diSize, size_t luSize);

   /// <summary>
   /// Конструктор с построением неполного LU(sq)-разложения по матрице mat
   /// </summary>
   /// <param name="mat"> - матрица, по которой построится LU-разложение, с привязкой этой матрицы к объекту</param>
   LU(const Matrix& mat);

// Блок основных нестатических методов класса
public:

   /// <summary>
   /// Разложить матрицу mat в неполное LU(sq) - разложение
   /// </summary>
   /// <param name="mat"> - матрица, которую требуется разложить. Она же будет использоваться для просмотра портрета матриц</param>
   void MakeLuFor(const Matrix& mat);
};